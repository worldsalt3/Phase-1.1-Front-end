[{"C:\\Users\\Iyo\\Desktop\\assignment_1\\src\\index.js":"1","C:\\Users\\Iyo\\Desktop\\assignment_1\\src\\reportWebVitals.js":"2"},{"size":6740,"mtime":1610440223928,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":499162500000,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1yesipd",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"C:\\Users\\Iyo\\Desktop\\assignment_1\\src\\index.js",["12","13","14","15","16","17","18","19","20","21","22"],"import React, {useState, useEffect} from 'react';\nimport Modal from 'react-modal';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nModal.setAppElement('#root');\n\nconst url = 'https://api.enye.tech/v1/challenge/records';\n\nconst Record = () => {\n  \n  const [record, setRecord] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [modalData, setModalData] = useState([]);\n  const [search, setSearch] = useState('');\n \n  \n  const getProfiles = async () => {\n    const response = await fetch(url);\n    const record = await response.json();\n    setRecord(record.records.profiles);\n  }\n\n  useEffect(async () => {\n    getProfiles();\n  }, []);\n\n  const data = () => {\n    setModalData(record)\n  }\n\n const openModal = (UserName) => {\n    data();\n    setModalIsOpen(true);\n    setModalData((record) => {\n      return record.filter((profile) => profile.UserName === UserName)\n    })\n  }\n\n  const clickSearch = (UserName) => {\n    setSearch((record) => {\n      return record.filter((profile) => profile.UserName === UserName)\n    })\n  }\n\n    console.log(search)\n\n  return (\n    <>\n      <header className='header'>\n        <h1>Records</h1>\n        <Search search={search} setSearch={setSearch} clickSearch={clickSearch}/>\n        <Filter />\n      </header>\n\n      <List record={record} openModal={openModal} data={data} search={search} clickSearch={clickSearch}/>\n      <DisplayModal setModalIsOpen={setModalIsOpen} modalData={modalData} modalIsOpen={modalIsOpen} openModal={openModal} />\n      <Pagination />\n    </>\n  )\n};\n\nconst Search = ({search, setSearch, clickSearch}) => {\n  return(\n    <>\n      <input type=\"text\" className=\"search\"  placeholder=\"Search for First Name..\" value={search} onChange={(e) => setSearch(e.target.value)}/>\n      <button className=\"button\" onClick={() => clickSearch(search)}></button>\n    </>\n  );\n};\n\nconst Pagination = () => {\n  return (\n    <div className='pagination pagin'>\n      <a href='#'>&laquo;</a>\n      <a href='#'>1</a>\n      <a className='active' href='#'>\n        2\n      </a>\n      <a href='#'>3</a>\n      <a href='#'>4</a>\n      <a href='#'>5</a>\n      <a href='#'>6</a>\n      <a href='#'>&raquo;</a>\n    </div>\n  )\n};\n\nconst Filter = () => {\n  return(\n    <div className=\"dropdown\">\n      <button className=\"dropbtn\">Filter</button>\n      <div id=\"myDropdown\" className=\"dropdown-content\">\n        <a href=\"#about\">About</a>\n        <a href=\"#base\">Base</a>\n        <a href=\"#blog\">Blog</a>\n        <a href=\"#contact\">Contact</a>\n        <a href=\"#custom\">Custom</a>\n        <a href=\"#support\">Support</a>\n        <a href=\"#tools\">Tools</a>\n      </div>\n    </div>\n  );\n};\n\nconst List = ({record, openModal, data, clickSearch}) => {\n  return (\n    <>\n      {record.map((profile, index) => {\n        const {\n          FirstName,\n          LastName,\n          PhoneNumber,\n          Email,\n          UserName\n        } = profile;\n        \n       if(index < 20) {\n          return (\n            <div\n              key={index}\n              className='card'\n              onClick={() => {\n                data()\n                openModal(UserName)\n              }}\n            >\n              <h2>\n                {FirstName} {LastName}\n              </h2>\n              <a href={Email}>\n                <p className='email'>{Email}</p>\n              </a>\n              <p>{PhoneNumber}</p>\n            </div>\n          )\n       } if(clickSearch) {\n\n\n         return (\n            <div\n              key={index}\n              className='card'\n              onClick={() => {\n                data()\n                openModal(UserName)\n              }}\n            >\n              <h2>\n                {FirstName} {LastName}\n              </h2>\n              <a href={Email}>\n                <p className='email'>{Email}</p>\n              </a>\n              <p>{PhoneNumber}</p>\n            </div>\n          )\n       }\n      })}\n    </>\n  )\n}\n\nconst DisplayModal = ({modalData, modalIsOpen, setModalIsOpen}) => {\n  return(\n    <>\n      {modalData.map((object, index) => {\n      const {FirstName,LastName,PhoneNumber,Email,Gender,CreditCardType,CreditCardNumber} = object;\n  \n      return (\n\n        <Modal\n          isOpen={modalIsOpen}\n          onRequestClose={() => setModalIsOpen(false)}\n          style={{\n            overlay: {\n              backgroundColor: 'rgba(0, 0, 0, 0.151)' /* Fallback color */,\n              backgroundColor: 'rgba(0, 0, 0, 0.082)' /* Black w/ opacity */,\n            },\n            content: {\n              position: 'relative',\n              backgroundColor: '#fefefe',\n              margin: 'auto',\n              padding: 0,\n              border: '1px solid #888',\n              width: '40%',\n              boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)',\n              /* box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.096),0 6px 20px 0 rgba(0, 0, 0, 0.034); */\n              animationName: 'animatetop',\n              animationDuration: '0.4s',\n              textAlign: 'left',\n            },\n          }}\n         key={index}>\n          <div>\n            <div className='modal-header'>\n              <span className='close' onClick={() => setModalIsOpen(false)}>\n                &times;\n              </span>\n              <h2>Personal Information</h2>\n            </div>\n            <div className='modal-body'>\n              <div className='content'>\n                <p>Name</p>\n                <p>\n                  {FirstName} {LastName}\n                </p>\n              </div>\n              <div className='content'>\n                <p>Gender</p>\n                <p>{Gender}</p>\n              </div>\n              <div className='content'>\n                <p>Email</p>\n                <p> {Email}</p>\n              </div>\n              <div className='content'>\n                <p>Phone Number</p>\n                <p>{PhoneNumber}</p>\n              </div>\n            </div>\n            <div className='modal-footer'>\n              <h3>CARD</h3>\n            </div>\n            <div className='modal-body'>\n              <div className='content'>\n                <p>Credit Card Number</p>\n                <p>{CreditCardNumber}</p>\n              </div>\n              <div className='content'>\n                <p>Credit Card Type</p>\n                <p>{CreditCardType}</p>\n              </div>\n            </div>\n          </div>\n        </Modal>\n      )\n      })}\n    </>\n  ) \n}\n \nReactDOM.render(\n    <Record />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","C:\\Users\\Iyo\\Desktop\\assignment_1\\src\\reportWebVitals.js",[],["23","24"],{"ruleId":"25","severity":1,"message":"26","line":25,"column":13,"nodeType":"27","endLine":27,"endColumn":4},{"ruleId":"28","severity":1,"message":"29","line":76,"column":7,"nodeType":"30","endLine":76,"endColumn":19},{"ruleId":"28","severity":1,"message":"29","line":77,"column":7,"nodeType":"30","endLine":77,"endColumn":19},{"ruleId":"28","severity":1,"message":"29","line":78,"column":7,"nodeType":"30","endLine":78,"endColumn":38},{"ruleId":"28","severity":1,"message":"29","line":81,"column":7,"nodeType":"30","endLine":81,"endColumn":19},{"ruleId":"28","severity":1,"message":"29","line":82,"column":7,"nodeType":"30","endLine":82,"endColumn":19},{"ruleId":"28","severity":1,"message":"29","line":83,"column":7,"nodeType":"30","endLine":83,"endColumn":19},{"ruleId":"28","severity":1,"message":"29","line":84,"column":7,"nodeType":"30","endLine":84,"endColumn":19},{"ruleId":"28","severity":1,"message":"29","line":85,"column":7,"nodeType":"30","endLine":85,"endColumn":19},{"ruleId":"31","severity":1,"message":"32","line":110,"column":36,"nodeType":"27","messageId":"33","endLine":110,"endColumn":38},{"ruleId":"34","severity":1,"message":"35","line":179,"column":15,"nodeType":"36","messageId":"37","endLine":179,"endColumn":30},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-dupe-keys","Duplicate key 'backgroundColor'.","ObjectExpression","unexpected","no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-global-assign","no-unsafe-negation"]